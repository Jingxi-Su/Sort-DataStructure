/*找两数中最小*/ 
let minOf2 = (numbers) => numbers[0] < numbers[1] ? numbers[0] : numbers[1];
let minOf2 = （[a , b]）=> a < b ? a : b; //析构赋值

/*n个*/
let min = (numbers) => {
    if(numbers.length > 2){
        return min([numbers[0], min(numbers.slice(1))])
    }else{
        return Math.min.apply(null, numbers)
    }
}

//minIndex
let minIndex = (numbers) => {
    numbers.indexOf(min(numbers));
}

/*3排序*/
let sort3 = (numbers) => {
    let index = minIndex(numbers);
    let min = numbers[index];
    numbers.splice(index , 1);//把最小值从数组中删除
    return [min].concat(sort2(numbers)); 
}


/*4排序*/
let sort4 = (numbers) => {
    let index = minIndex(numbers);
    let min = numbers[index];
    numbers.splice(index , 1);//把最小值从数组中删除
    return [min].concat(sort3(numbers)); 
}

/*任意长度排序*/
let sort = (numbers) => {
    if（numbers.length > 2）{
    let index = minIndex(numbers);
    let min = numbers[index];//调试 console.log(`min : ${min}`)
    numbers.splice(index , 1);//把最小值从数组中删除，splice会返回被删除的部分，所以不能let a = numbers.splice(index , 1) = min,直接写就行,因为splice会改变数组本身
    return [min].concat(sort(numbers)); 
    }else{
        return numbers[0] < numbers[1] ? numbers : numbers.reverse();//调用reverse函数

    }
}