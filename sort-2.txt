/*minIndex重写*/
let minIndex = (numbers) => {
    let index = 0;
    for(let i = 1; i < numbers.length; i++){
        if(numbers[i] < numbers[index]){
            index = i;
        }
    }
    return index;
}

/*swap交换*/
let swap = (array, i, j) => {
    let temp = array[i];
    array[i] = array[j];
    array[j] = temp;
}//数组做形参，在传实参时是复制数组的地址，在函数中做的操作也会改变实参。

/*Js析构赋值也可以做到swap，但是不能交换数组的*/
[ a , b ]=[ b , a ]

/*选择排序算法*/
let sort = (numbers) => {
  for(let i=0; i< numbers.length -1; i++){
    console.log(`----`) //这个log很精髓
    console.log(`i: ${i}`)
    let index = minIndex(numbers.slice(i))+ i/*每次排好一个后，只需要它看后面的，所以要minIndex(numbers.slice(i))*/
    console.log(`index: ${index}`)
    console.log(`min: ${numbers[index]}`)
    if(index!==i){
      swap(numbers, index, i)
      console.log(`swap ${index}: ${i}`)
      console.log(numbers)
    }
}
  return numbers
}

/*选择排序算法最终版(循环)*/
let sort = (numbers) => {
  for(let i=0; i < numbers.length -1; i++){
    let index = minIndex(numbers.slice(i))+ i/*每次排好一个后，只需要它看后面的，所以要minIndex(numbers.slice(i))*/
    if(index!==i){
      swap(numbers, index, i) 
    }
}
  return numbers
}

/*快速排序*/
let quickSort = arr => {
    if(arr.length <= 1){return arr;}
    let pivotIndex = Math.floor(arr.length/2);
    let pivot = arr.splice(pivotIndex, 1)[0];//取切出来的数组的第0个（其实就是它本身），因为splice会返回数组
    let left = [];
    let right = [];
    for(let i=0; i < arr.length; i++){
        if(arr[i] < pivot){
            left.push(arr[i]);
        }else{
            right.push(arr[i]);
        }
    }
    return quickSort(left).concat([pivot], quickSort(right));
}

/*归并排序*/
let mergeSort = arr =>{
    if(arr.length===1){return arr}
    let left = arr.slice(0, Math.floor(arr.length/2))//Math.floor向下取整
    let right = arr.slice(Math.floor(arr.length/2))
    return merge(mergeSort(left), mergeSort(right))
}

let merge = (a , b) =>{
    if(a.length===0) return b;
    if(b.length===0) return a;
    return a[0]>b[0]? [b[0]].concat(merge(a,b.slice(1))):[a[0]].concat(merge(a.slice(1),b))
}

/*计数排序*/
let  countingSort = arr =>{
    let hashTable = {}, max = 0, result = [];
    for(let i=0; i < arr.length; i++){//遍历数组
        if(!(arr[i] in hashTable)){
            hashTable[arr[i]] = 1;
        }else{
            hashTable[arr[i]] += 1;
        }
        if(arr[i] > max){
            max = arr[i];
        }
    }
    for(let j=0; j <= max; j++){
        if(j in hashTable){
            for(let i=0; i < hashTable[j]; i++){//j对应arr中的某一个数，hashashTable[j]对应j出现的次数
                result.push(j)
            }   
        }
    }
    return result
}

总结：
1./*选择排序*/每次找到最小的放到最前面，然后找后面的最小的，重复
2./*快速排序*/找中点，以中点为基准，大小各放一边 
3./*归并排序*/找中点，以重点为基准左右分别排序，然后合并
4./*计数排序*/遍历数组，使用哈希表存储每个字出现的次数，同时找到max，从j∈（0，max）查找，若j在哈希表里，push j存在的次数，若不在就忽略

